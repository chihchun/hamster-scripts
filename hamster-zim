#!/usr/bin/python3
import argparse
import calendar
import datetime
import logging
import os
import os.path
import sys

import dbus
import yaml

logger = logging.getLogger("hamster-zim")
logging.basicConfig(stream=sys.stdout)

def mapping(path):
    projects = yaml.load(open(os.environ['HOME'] + '/.config/hamster-projects.yaml'), Loader=yaml.BaseLoader)
    pathes = path.split('/')

    # find folder
    for name in reversed(pathes):
        name = name.lower()
        logger.debug("filename: {}".format(name))
        if name in projects:
            return projects[name]

    # find the base filename
    basename = os.path.splitext(path.split('/')[-1])[0]
    logger.debug("basename: {}".format(basename))
    for name in basename.split('_'):
        name = name.lower()
        logger.debug("filename: {}".format(name))
        if name in projects:
            return projects[name]

    return "Zone Out@Personal"

def validate(fact):
    hamster = dbus.SessionBus().get_object('org.gnome.Hamster', '/org/gnome/Hamster')
    (activity, category) = fact.split("@")
    cid = hamster.GetCategoryId(category)
    if cid == 0:
        raise Exception("catetory {} not found".format(category))

    activityDict = hamster.GetActivityByName(activity, cid, False)
    if 'id' not in activityDict:
        hamster.AddActivity(activity, category)
        pass


if __name__ == "__main__":
    # /home/chihchun/workspace/zim/hamster-scripts/hamster-zim %s %t
    # %s real page source
    # %t selected text

    parser = argparse.ArgumentParser(description="update activity")
    parser.add_argument('-v', dest='verbose', help='verbose', action='store_true')
    args, unparsed = parser.parse_known_args()
    if args.verbose:
        logger.setLevel(logging.DEBUG)

    if(not unparsed[1:]):
        raise Exception("Usage: {} page_filename text".format(os.path.basename(__file__)))
    fact = mapping(unparsed[0])
    logger.debug("see {} as fact: {}".format(unparsed[0], fact))
    description = unparsed[1]

    hamster = dbus.SessionBus().get_object('org.gnome.Hamster', '/org/gnome/Hamster')
    validate(fact)
    hamster.AddFact('%s,, %s' % (fact, description), calendar.timegm(datetime.datetime.now().timetuple()), 0, False)
